/// <summary>
/// The structure that describes a virtual joystick touchpad.
/// </summary>
/// <remarks>
/// The official documentation for this symbol can be found <see href="https://wiki.libsdl.org/SDL3/SDL_VirtualJoystickTouchpadDesc">here</see>.
/// </remarks>
[StructLayout(LayoutKind.Sequential)]
public struct VirtualJoystickTouchpadDescription
{
	/// <summary>
	/// The number of simultaneous fingers on this touchpad
	/// </summary>
	public ushort NFingers;

	private fixed short _padding[3];
}

/// <summary>
/// The structure that describes a virtual joystick sensor.
/// </summary>
/// <remarks>
/// The official documentation for this symbol can be found <see href="https://wiki.libsdl.org/SDL3/SDL_VirtualJoystickSensorDesc">here</see>.
/// </remarks>
[StructLayout(LayoutKind.Sequential)]
public struct VirtualJoystickSensorDescription
{
	/// <summary>
	/// The type of this sensor.
	/// </summary>
	public SensorType Type;

	/// <summary>
	/// The update frequency of this sensor, may be 0.0f.
	/// </summary>
	public float Rate;
}

/// <summary>
/// The structure that describes a virtual joystick.
/// </summary>
/// <remarks>
/// The official documentation for this symbol can be found <see href="https://wiki.libsdl.org/SDL3/SDL_VirtualJoystickDesc">here</see>.
/// </remarks>
[StructLayout(LayoutKind.Sequential)]
public struct VirtualJoystickDescription
{
	/// <summary>
	/// A <see cref="JoystickType"/> value.
	/// </summary>
	public ushort Type;

	private readonly ushort _padding1;

	/// <summary>
	/// The USB vendor ID of this joystick.
	/// </summary>
	public ushort VendorId;

	/// <summary>
	/// The USB product ID of this joystick.
	/// </summary>
	public ushort ProductId;

	/// <summary>
	/// The number of axes on this joystick.
	/// </summary>
	public ushort NAxes;

	/// <summary>
	/// The number of buttons on this joystick.
	/// </summary>
	public ushort NButtons;

	/// <summary>
	/// The number of balls on this joystick.
	/// </summary>
	public ushort NBalls;

	/// <summary>
	/// The number of hats on this joystick.
	/// </summary>
	public ushort NHats;

	/// <summary>
	/// The number of touchpads on this joystick, requires <see cref="Touchpads"/> to point at valid descriptions.
	/// </summary>
	public ushort NTouchpads;

	/// <summary>
	/// The number of sensors on this joystick, requires <see cref="Sensors"/> to point at valid descriptions.
	/// </summary>
	public ushort NSensors;

	// it is the same using "fixed type variable[2]" as just writing two fields?
	private fixed ushort _padding2[2];

	/// <summary>
	/// A mask of which buttons are valid for this controller.
	/// </summary>
	public uint ButtonMask;

	/// <summary>
	/// A mask of which axes are valid for this controller.
	/// </summary>
	public uint AxisMask;

	/// <summary>
	/// The name of the joystick.
	/// </summary>
	public readonly string? Name => Marshal.PtrToStringUTF8((nint)_name);

	private readonly byte* _name;

	/// <summary>
	/// A pointer to an array of touchpad descriptions, required if <see cref="NTouchpads"/> is &gt; 0.
	/// </summary>
	public readonly VirtualJoystickTouchpadDescription[] Touchpads
	{
		get
		{
			var touchpads = new VirtualJoystickTouchpadDescription[NTouchpads];
			for (int i = 0; i < NTouchpads; i++)
			{
				touchpads[i] = _touchpads[i];
			}
			return touchpads;
		}
	}

	private readonly VirtualJoystickTouchpadDescription* _touchpads;

	/// <summary>
	/// A pointer to an array of sensor descriptions, required if <see cref="NSensors"/> is &gt; 0.
	/// </summary>
	public readonly VirtualJoystickSensorDescription[] Sensors
	{
		get
		{
			var sensors = new VirtualJoystickSensorDescription[NTouchpads];
			for (int i = 0; i < NTouchpads; i++)
			{
				sensors[i] = _sensors[i];
			}
			return sensors;
		}
	}

	private readonly VirtualJoystickSensorDescription* _sensors;

	/// <summary>
	/// User data pointer passed to callbacks.
	/// </summary>
	public void* UserData;

	/// <summary>
	/// Called when the joystick state should be updated.
	/// </summary>
	public VirtualJoystickUpdateCallback Update;

	/// <summary>
	/// Called when the player index is set.
	/// </summary>
	public VirtualJoystickSetPlayerIndexCallback SetPlayerIndex;

	/// <summary>
	/// Implements <see cref="FIXME:SDL_RumbleJoystick()"/>.
	/// </summary>
	public VirtualJoystickRumbleCallback Rumble;

	/// <summary>
	/// Implements <see cref="FIXME:SDL_RumbleJoystickTriggers()"/>.
	/// </summary>
	public VirtualJoystickRumbleTriggersCallback RumbleTriggers;

	/// <summary>
	/// Implements <see cref="FIXME:SDL_SetJoystickLED()"/>.
	/// </summary>
	public VirtualJoystickSetLEDCallback SetLED;

	/// <summary>
	/// Implements <see cref="FIXME:SDL_SendJoystickEffect()"/>.
	/// </summary>
	public VirtualJoystickSendEffectCallback SendEffect;

	/// <summary>
	/// Implements <see cref="FIXME:SDL_SetGamepadSensorEnabled()"/>.
	/// </summary>
	public VirtualJoystickSetSensorsEnabledCallback SetSensorsEnabled;
}

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate void VirtualJoystickUpdateCallback(void* userData);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate void VirtualJoystickSetPlayerIndexCallback(void* userData, int playerIndex);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate int VirtualJoystickRumbleCallback(void* userData, ushort lowFrequencyRumble, ushort highFrequencyRumble);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate int VirtualJoystickRumbleTriggersCallback(void* userData, ushort leftRumble, ushort rightRumble);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate int VirtualJoystickSetLEDCallback(void* userData, byte red, byte green, byte blue);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate int VirtualJoystickSendEffectCallback(void* userData, void* data, int size);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate int VirtualJoystickSetSensorsEnabledCallback(void* userData, int enabled);